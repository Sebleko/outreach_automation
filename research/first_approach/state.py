from langgraph.graph import BaseGraphState

class AgentGraphState(BaseGraphState):
    """
    This state class stores all the data that flows between nodes in the research pipeline.
    It includes fields for the user query, search queries (both current and historical),
    aggregated context from webpages, and various mappings generated during the process.
    
    Fields:
      - user_query (str): The research question or topic provided by the user.
      - search_queries (list): The latest list of search queries generated by the LLM.
      - all_search_queries (list): The full history of search queries used throughout the process.
      - aggregated_contexts (list): A list of all useful contexts extracted from webpages.
      - links (dict): A dictionary mapping each unique link to the search query that produced it.
      - page_texts (dict): A dictionary mapping each link to its fetched page content.
      - usefulness (dict): A dictionary mapping each link to a "Yes"/"No" verdict on usefulness.
      - continue_research (bool): Flag to indicate if additional search queries are required.
      - final_report (str): The final comprehensive report generated from the gathered contexts.
    """
    
    def __init__(
        self,
        user_query: str = "",
        search_queries: list = None,
        all_search_queries: list = None,
        aggregated_contexts: list = None,
        links: dict = None,
        page_texts: dict = None,
        usefulness: dict = None,
        continue_research: bool = False,
        final_report: str = "",
        **kwargs
    ):
        super().__init__(**kwargs)
        self["user_query"] = user_query
        self["search_queries"] = search_queries if search_queries is not None else []
        self["all_search_queries"] = all_search_queries if all_search_queries is not None else []
        self["aggregated_contexts"] = aggregated_contexts if aggregated_contexts is not None else []
        self["links"] = links if links is not None else {}
        self["page_texts"] = page_texts if page_texts is not None else {}
        self["usefulness"] = usefulness if usefulness is not None else {}
        self["continue_research"] = continue_research
        self["final_report"] = final_report

def get_agent_graph_state(state: AgentGraphState, state_key: str):
    """
    Helper function to safely retrieve a value from the state.
    
    Args:
        state (AgentGraphState): The current state.
        state_key (str): The key whose value is to be retrieved.
    
    Returns:
        The value associated with state_key or None if the key is not found.
    """
    return state.get(state_key, None)

def update_agent_graph_state(state: AgentGraphState, state_key: str, value):
    """
    Helper function to update a specific key in the state.
    
    Args:
        state (AgentGraphState): The current state.
        state_key (str): The key to update.
        value: The new value to set for the key.
    
    Returns:
        The updated state.
    """
    state[state_key] = value
    return state